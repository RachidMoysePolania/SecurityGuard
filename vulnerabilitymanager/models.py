from django.db import models
import random
from django.utils.text import slugify
from django.contrib.auth.models import User
import string


def rand_slug():
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(6))

# Create your models here.
class Vulnerability(models.Model):

    #AFV-N
    VulnerabilityId = models.CharField(verbose_name="VulnerabilityId", name="VulnerabilityId", unique=True, blank=False, null=False, max_length=10, primary_key=True)
    ShortDescription = models.TextField(verbose_name="ShortDescription", name="ShortDescription", max_length=60, blank=False, null=False)
    Description = models.TextField(verbose_name="Description", name="Description", max_length=200, blank=False, null=False)
    Solution = models.TextField(verbose_name="Solution", name="Solution", max_length=200, blank=False, null=False)
    CWEID = models.IntegerField(verbose_name="CWEID", name="CWEID", unique=False, blank=True, null=True)
    CVEID = models.CharField(verbose_name="CVEID", name="CVEID", unique=False, blank=True, null=True, max_length=50)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=False)
    CreationDate = models.DateTimeField(auto_now_add=True, verbose_name="CreationDate", name="CreationDate")
    UpdateDate = models.DateTimeField(auto_now=True, verbose_name="UpdateDate", name="UpdateName")


    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(rand_slug() + "-" + self.VulnerabilityId)
        super(Vulnerability, self).save(*args, **kwargs)


    def __str__(self):
        return self.VulnerabilityId

    class Meta:
        ordering = ['VulnerabilityId', '-CreationDate']
        verbose_name_plural = "Vulnerabilities"

class Tickets(models.Model):
    tikectypes = models.TextChoices("TicketType", "TEST RETEST")
    TicketId = models.CharField(verbose_name="TicketId", name="TicketId", null=False, blank=False, max_length=15, unique=False)
    Vulnerabilities = models.ManyToManyField(Vulnerability, verbose_name="Vulnerabilities", name="Vulnerabilities", db_constraint=False)
    HackerName = models.CharField(verbose_name="HackerName", name="HackerName", unique=False, null=False, blank=False, max_length=15)
    TicketType = models.CharField(choices=tikectypes.choices, max_length=10, null=False, blank=False, verbose_name="TicketType", name="TicketType")
    Client = models.CharField(verbose_name="Client", name="Client", max_length=20, null=False, unique=False, blank=False)
    Celula = models.CharField(verbose_name="Celula", name="Celula", max_length=20, null=False, unique=False, blank=False)
    Info = models.CharField(verbose_name="Info", name="Info", max_length=20, null=False, unique=False, blank=False)
    TicketCreationDate = models.DateTimeField(auto_now_add=False, verbose_name="TicketCreationDate", name="TicketCreationDate")
    TicketCloseDate = models.DateTimeField(auto_now_add=False, verbose_name="TicketCloseDate", name="TicketCloseDate")
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=False)
    CreationDateTime = models.DateTimeField(auto_now_add=True, verbose_name="CreationDateTime", name="CreationDateTime")
    UpdateDateTime = models.DateTimeField(auto_now=True, verbose_name="UpdateDateTime", name="UpdateDateTime")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(rand_slug() + "-" + self.TicketId)
        super(Tickets, self).save(*args, **kwargs)


    def __str__(self):
        return self.TicketId

    class Meta:
        ordering = ['TicketId', '-CreationDateTime']
        verbose_name_plural = "Tickets"

class Task(models.Model):

    tasktypes = (
        ("Sin Iniciar", "Sin Iniciar"),
        ("En Curso", "En Curso"),
        ("Finalizada", "Finalizada"),
        ("Retrasada", "Retrasada"),
        ("Con inconvenientes", "Con inconvenientes"),
    )

    TaskId = models.AutoField(verbose_name="TaskId", name="TaskId", primary_key=True)
    TaskName = models.CharField(verbose_name="TaskName", name="TaskName", unique=False, null=False, blank=False, max_length=30)
    TaskDescription = models.CharField(verbose_name="TaskDescription", name="TaskDescription", unique=False, null=False, blank=False, max_length=200)
    UserTask = models.ManyToManyField(User, verbose_name="UserTask", name="UserTask", null=False, blank=False, unique=False, db_constraint=False)
    TicketAssigned = models.ManyToManyField(Tickets, verbose_name="TicketAssigned", name="TicketAssigned", blank=False, unique=False, null=False, db_constraint=False)
    TaskState = models.CharField(verbose_name="TaskState", name="TaskState", null=False, blank=False, unique=False, max_length=20, choices=tasktypes, default="Sin Iniciar")
    TaskFiles = models.FileField(verbose_name="TaskFiles", name="TaskFiles", upload_to="Tasks/", blank=True, null=True)
    TaskDueDate = models.DateField(auto_now_add=False, verbose_name="TaskDueDate", name="TaskDueDate")
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=False)
    CreationTaskTime = models.DateTimeField(auto_now_add=True, verbose_name="CreationTaskTime", name="CreationTaskTime")
    UpdateTaskTime = models.DateTimeField(auto_now=True, verbose_name="UpdateTaskTime", name="UpdateTaskTime")
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(rand_slug()+"-"+self.TaskName)
        super(Task, self).save(*args, **kwargs)
    
    def __str__(self):
        return self.TaskName

    class Meta:
        ordering = ['TaskId', "TaskName", '-CreationTaskTime']
        verbose_name_plural = "Tasks"